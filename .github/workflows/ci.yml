name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Odin (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-14 clang-14
        wget https://github.com/odin-lang/Odin/releases/latest/download/odin-ubuntu-amd64.zip
        unzip odin-ubuntu-amd64.zip
        sudo mv odin /usr/local/bin/
        chmod +x /usr/local/bin/odin

    - name: Install Odin (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm
        wget https://github.com/odin-lang/Odin/releases/latest/download/odin-macos-amd64.zip
        unzip odin-macos-amd64.zip
        sudo mv odin /usr/local/bin/
        chmod +x /usr/local/bin/odin

    - name: Verify Odin installation
      run: |
        odin version
        which odin

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x

    - name: Install Ruby (for integration tests)
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Build wayu
      run: task build

    - name: Verify build output
      run: |
        ls -lh bin/wayu
        ./bin/wayu version

    - name: Run smoke tests
      run: ./scripts/smoke-test.sh

    - name: Run unit tests
      run: task test

    - name: Run integration tests
      run: task test:integration

    - name: Test CLI non-interactive behavior
      run: |
        # Test that CLI requires explicit arguments
        if ./bin/wayu path add 2>&1 | grep -q "Missing required arguments"; then
          echo "✓ CLI correctly requires explicit arguments"
        else
          echo "✗ CLI should require explicit arguments"
          exit 1
        fi

        # Test exit code
        EXIT_CODE=$(./bin/wayu path add > /dev/null 2>&1; echo $?)
        if [ $EXIT_CODE -eq 64 ]; then
          echo "✓ CLI returns correct exit code (64)"
        else
          echo "✗ CLI should return exit code 64, got $EXIT_CODE"
          exit 1
        fi

        # Test scriptability (pipes)
        if ./bin/wayu path list | grep -q ""; then
          echo "✓ CLI works in pipes"
        else
          echo "✗ CLI should work in pipes"
          exit 1
        fi

    - name: Test with different shells
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Test with bash
        echo "Testing with bash..."
        bash -c './bin/wayu --shell bash init || true'
        bash -c './bin/wayu --shell bash path list || true'

        # Test with zsh
        echo "Testing with zsh..."
        sudo apt-get install -y zsh
        zsh -c './bin/wayu --shell zsh init || true'
        zsh -c './bin/wayu --shell zsh path list || true'

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: wayu-${{ matrix.os }}
        path: bin/wayu
        retention-days: 7

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Odin
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-14 clang-14
        wget https://github.com/odin-lang/Odin/releases/latest/download/odin-ubuntu-amd64.zip
        unzip odin-ubuntu-amd64.zip
        sudo mv odin /usr/local/bin/
        chmod +x /usr/local/bin/odin

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x

    - name: Check code
      run: task check

    - name: Build with warnings as errors
      run: odin build src -out:bin/wayu_test -warnings-as-errors -o:speed

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check version consistency
      run: |
        # Check that version in code matches expected
        VERSION=$(grep -oP 'wayu v\K[0-9]+\.[0-9]+\.[0-9]+' src/main.odin | head -1)
        echo "Found version: $VERSION"

        # Verify version format
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "✗ Invalid version format: $VERSION"
          exit 1
        fi

        echo "✓ Version format valid: $VERSION"

    - name: Check documentation
      run: |
        # Verify key documentation files exist
        for file in README.md CLAUDE.md docs/MANUAL_TESTING.md; do
          if [ ! -f "$file" ]; then
            echo "✗ Missing required file: $file"
            exit 1
          fi
        done
        echo "✓ All documentation files present"

    - name: Check for TODO/FIXME comments
      run: |
        # Check for unresolved TODOs in source code
        TODO_COUNT=$(grep -r "TODO\|FIXME" src/ --include="*.odin" | wc -l || true)
        if [ "$TODO_COUNT" -gt 0 ]; then
          echo "⚠ Found $TODO_COUNT TODO/FIXME comments"
          grep -r "TODO\|FIXME" src/ --include="*.odin" || true
        else
          echo "✓ No TODO/FIXME comments in source"
        fi
